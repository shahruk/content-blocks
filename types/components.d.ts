/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { ContentLineTextAlignOptions as ContentLineTextAlignOptions1, ContentVerticalAlignments, FLEX_JUSTIFY_OPTIONS, GRID_TYPES, ResponsiveBoolean, ResponsiveNumber, ResponsiveString } from "./typings";
import { InitMethodType } from "./components/content-carousel/content-carousel";
import { HeroContentPlacementOptions } from "./blocks/content-hero-block/content-hero-block";
import { ContentLineTextAlignOptions } from "./elements/content-line/content-line";
import { SupportedVideoMethods } from "./elements/content-video/content-video";
export namespace Components {
    interface ContentAccordion {
    }
    interface ContentBlockFormatter {
    }
    interface ContentBlockWrapper {
        "background": ResponsiveString;
        "backgroundClasses": string;
        "maxWidth": ResponsiveNumber;
        "name": string;
        "styleClass": ResponsiveString;
    }
    interface ContentButton {
        /**
          * @type Boolean
         */
        "clickableBlock": boolean;
        /**
          * @type String
         */
        "controls": string;
        /**
          * @type String
         */
        "expanded": string;
        /**
          * @type URL
         */
        "href": string;
        /**
          * @type String
         */
        "styleClass"?: string;
        /**
          * @type String
         */
        "target": string;
    }
    interface ContentCarousel {
        /**
          * @type String
          * @responsive
         */
        "background": string;
        /**
          * @type Select
          * @choice load
          * @choice init
         */
        "initMethod": InitMethodType;
        "swiperOptions": string;
    }
    interface ContentFormatterWrapper {
        "background": string;
        "extraClasses": string;
        "name": string;
    }
    interface ContentGridFormatter {
        /**
          * @type Number
          * @responsive
         */
        "columns": ResponsiveNumber;
        /**
          * @type Select
          * @choice flex-start
          * @choice space-between
          * @choice center
          * @choice space-evenly
          * @responsive
         */
        "flexAlign": FLEX_JUSTIFY_OPTIONS | ResponsiveString;
        /**
          * @type Boolean
          * @responsive
         */
        "flexGrow": ResponsiveBoolean;
        /**
          * @type Boolean
          * @responsive
         */
        "flexShrink": ResponsiveBoolean;
        /**
          * @type Select
          * @choice flex
          * @choice grid
          * @responsive
         */
        "type": GRID_TYPES | ResponsiveString;
    }
    interface ContentHeroBlock {
        /**
          * @type String
          * @responsive
         */
        "background": ResponsiveString;
        /**
          * Pipe separated HeroContentPlacementOptions that will determine where the content is positioned with the media.
          * @type Select
          * @choice below
          * @choice above
          * @responsive
         */
        "contentPosition": ResponsiveString | HeroContentPlacementOptions;
    }
    interface ContentImage {
        /**
          * @type String
          * @responsive
         */
        "alt": ResponsiveString;
        /**
          * @type Number
          * @responsive
         */
        "height": ResponsiveNumber;
        /**
          * @type Boolean
         */
        "lazyLoad": boolean;
        /**
          * @type String
          * @responsive
         */
        "src": ResponsiveString;
        /**
          * @type String
         */
        "videoType"?: string;
        /**
          * @type Number
          * @responsive
         */
        "width": ResponsiveNumber;
    }
    interface ContentLine {
        /**
          * Pipe separated list of max width numbers. You can also use units such as "px" and "vw".
          * @type Percentage
          * @responsive
         */
        "maxWidth": ResponsiveNumber;
        /**
          * The font class for the line.
          * @type String
          * @responsive
         */
        "styleClass": ResponsiveString;
        /**
          * Pipe separated list of ContentLineTextAlignOptions for text alignment.
          * @type Select
          * @choice default
          * @choice left
          * @choice center
          * @choice right
          * @responsive
         */
        "textAlign": ContentLineTextAlignOptions | ResponsiveString;
    }
    interface ContentOverlay {
        /**
          * Title attribute value for the close button.
          * @type String
         */
        "closeTitle": string;
        /**
          * @type Boolean
          * @responsive
         */
        "fullScreen": ResponsiveBoolean;
        /**
          * A pipe delimited setting for horizontal alignment. This only applies when fullscreen mode is activated.
          * @type Select
          * @choice default
          * @choice left
          * @choice center
          * @choice right
          * @responsive
         */
        "horizontalAlignment": ContentLineTextAlignOptions | ResponsiveString;
        /**
          * @type String
          * @responsive
         */
        "styleClass": ResponsiveString;
        /**
          * @type String
          * @responsive
         */
        "target": string;
        /**
          * A pipe delimited setting for vertical alignment. This only applies when fullscreen mode is activated.
          * @type Select
          * @choice top
          * @choice center
          * @choice bottom
         */
        "verticalAlignment": ContentVerticalAlignments | ResponsiveString;
    }
    interface ContentSpacingWrapper {
        /**
          * Pipe separated numbers between 0 and 100.
          * @type Number
          * @responsive
         */
        "bottomOffset": ResponsiveNumber;
        /**
          * Pipe separated boolean values for full height. Typically, this is used if you have a hero block and you want a footer that aligns with the text layer. This is a niche case, but a valid one.
          * @type Boolean
          * @responsive
         */
        "fullHeight": ResponsiveBoolean;
        /**
          * Pipe separated list of ContentLineTextAlignOptions for where to place text box when a max width is specified.
          * @type Select
          * @choice default
          * @choice left
          * @choice center
          * @choice right
          * @responsive
         */
        "horizontalAlignment": ContentLineTextAlignOptions | ResponsiveString;
        /**
          * Pipe separated numbers between 0 and 100.
          * @type Number
          * @responsive
         */
        "leftOffset": ResponsiveNumber;
        /**
          * Pipe separated list of max width numbers. You can also use units such as "px" and "vw".
          * @type Percentage
          * @responsive
         */
        "maxWidth": ResponsiveNumber;
        /**
          * A custom class to use as the offset. This cannot be pipe separated, because this causes repaint of content.
          * @type String
         */
        "offsetClass": string;
        /**
          * Pipe separated numbers between 0 and 100.
          * @type Number
          * @responsive
         */
        "rightOffset": ResponsiveNumber;
        /**
          * Pipe separated list of ContentLineTextAlignOptions for text alignment.
          * @type Select
          * @choice default
          * @choice left
          * @choice center
          * @choice right
          * @responsive
         */
        "textAlign": ContentLineTextAlignOptions | ResponsiveString;
        /**
          * Pipe separated numbers between 0 and 100.
          * @type Number
          * @responsive
         */
        "topOffset": ResponsiveNumber;
    }
    interface ContentSplitBlock {
        /**
          * @type String
          * @responsive
         */
        "background": string;
        /**
          * @type Boolean
          * @responsive
         */
        "reverse": ResponsiveBoolean | boolean;
    }
    interface ContentTabs {
    }
    interface ContentTextBlock {
        /**
          * @type String
          * @responsive
         */
        "background": ResponsiveString;
        /**
          * This is a pipe separated string representing the style class.
          * @type String
          * @responsive
         */
        "styleClass": ResponsiveString;
        /**
          * Pipe separated list of ContentVerticalAlignments for text box placement.
          * @type Select
          * @choice top
          * @choice center
          * @choice bottom
          * @responsive
         */
        "verticalAlignment": ContentVerticalAlignments | ResponsiveString;
    }
    interface ContentToutBlock {
        /**
          * If true, the media content will show only on hover
          * @type Boolean
          * @responsive
         */
        "hover": ResponsiveBoolean;
    }
    interface ContentVideo {
        /**
          * If you're using this inside a content-overlay for example, you may want the video to play immediately on launch.
          * @type Boolean
         */
        "autoplay": boolean;
        /**
          * @type Boolean
         */
        "controls": boolean;
        /**
          * If this video is opened within a container, e.g. a <content-overlay> with a target. The height of the video will fit the container instead of resizing to the video aspect ratio.
          * @type Boolean
          * @responsive
         */
        "fitContainer": boolean;
        /**
          * @type Number
         */
        "height": number;
        /**
          * @type Select
          * @choice youtube
          * @choice html5
         */
        "method": SupportedVideoMethods;
        /**
          * @type String
         */
        "playButtonAriaLabel": string;
        /**
          * @type String
         */
        "preload": string;
        /**
          * Supports YouTube and self hosted URLs.
          * @type String
         */
        "src": string;
        /**
          * @type String
          * @responsive
         */
        "styleClass": ResponsiveString;
        /**
          * @type String
         */
        "type": string;
        /**
          * @type Number
         */
        "width": number;
    }
}
declare global {
    interface HTMLContentAccordionElement extends Components.ContentAccordion, HTMLStencilElement {
    }
    var HTMLContentAccordionElement: {
        prototype: HTMLContentAccordionElement;
        new (): HTMLContentAccordionElement;
    };
    interface HTMLContentBlockFormatterElement extends Components.ContentBlockFormatter, HTMLStencilElement {
    }
    var HTMLContentBlockFormatterElement: {
        prototype: HTMLContentBlockFormatterElement;
        new (): HTMLContentBlockFormatterElement;
    };
    interface HTMLContentBlockWrapperElement extends Components.ContentBlockWrapper, HTMLStencilElement {
    }
    var HTMLContentBlockWrapperElement: {
        prototype: HTMLContentBlockWrapperElement;
        new (): HTMLContentBlockWrapperElement;
    };
    interface HTMLContentButtonElement extends Components.ContentButton, HTMLStencilElement {
    }
    var HTMLContentButtonElement: {
        prototype: HTMLContentButtonElement;
        new (): HTMLContentButtonElement;
    };
    interface HTMLContentCarouselElement extends Components.ContentCarousel, HTMLStencilElement {
    }
    var HTMLContentCarouselElement: {
        prototype: HTMLContentCarouselElement;
        new (): HTMLContentCarouselElement;
    };
    interface HTMLContentFormatterWrapperElement extends Components.ContentFormatterWrapper, HTMLStencilElement {
    }
    var HTMLContentFormatterWrapperElement: {
        prototype: HTMLContentFormatterWrapperElement;
        new (): HTMLContentFormatterWrapperElement;
    };
    interface HTMLContentGridFormatterElement extends Components.ContentGridFormatter, HTMLStencilElement {
    }
    var HTMLContentGridFormatterElement: {
        prototype: HTMLContentGridFormatterElement;
        new (): HTMLContentGridFormatterElement;
    };
    interface HTMLContentHeroBlockElement extends Components.ContentHeroBlock, HTMLStencilElement {
    }
    var HTMLContentHeroBlockElement: {
        prototype: HTMLContentHeroBlockElement;
        new (): HTMLContentHeroBlockElement;
    };
    interface HTMLContentImageElement extends Components.ContentImage, HTMLStencilElement {
    }
    var HTMLContentImageElement: {
        prototype: HTMLContentImageElement;
        new (): HTMLContentImageElement;
    };
    interface HTMLContentLineElement extends Components.ContentLine, HTMLStencilElement {
    }
    var HTMLContentLineElement: {
        prototype: HTMLContentLineElement;
        new (): HTMLContentLineElement;
    };
    interface HTMLContentOverlayElement extends Components.ContentOverlay, HTMLStencilElement {
    }
    var HTMLContentOverlayElement: {
        prototype: HTMLContentOverlayElement;
        new (): HTMLContentOverlayElement;
    };
    interface HTMLContentSpacingWrapperElement extends Components.ContentSpacingWrapper, HTMLStencilElement {
    }
    var HTMLContentSpacingWrapperElement: {
        prototype: HTMLContentSpacingWrapperElement;
        new (): HTMLContentSpacingWrapperElement;
    };
    interface HTMLContentSplitBlockElement extends Components.ContentSplitBlock, HTMLStencilElement {
    }
    var HTMLContentSplitBlockElement: {
        prototype: HTMLContentSplitBlockElement;
        new (): HTMLContentSplitBlockElement;
    };
    interface HTMLContentTabsElement extends Components.ContentTabs, HTMLStencilElement {
    }
    var HTMLContentTabsElement: {
        prototype: HTMLContentTabsElement;
        new (): HTMLContentTabsElement;
    };
    interface HTMLContentTextBlockElement extends Components.ContentTextBlock, HTMLStencilElement {
    }
    var HTMLContentTextBlockElement: {
        prototype: HTMLContentTextBlockElement;
        new (): HTMLContentTextBlockElement;
    };
    interface HTMLContentToutBlockElement extends Components.ContentToutBlock, HTMLStencilElement {
    }
    var HTMLContentToutBlockElement: {
        prototype: HTMLContentToutBlockElement;
        new (): HTMLContentToutBlockElement;
    };
    interface HTMLContentVideoElement extends Components.ContentVideo, HTMLStencilElement {
    }
    var HTMLContentVideoElement: {
        prototype: HTMLContentVideoElement;
        new (): HTMLContentVideoElement;
    };
    interface HTMLElementTagNameMap {
        "content-accordion": HTMLContentAccordionElement;
        "content-block-formatter": HTMLContentBlockFormatterElement;
        "content-block-wrapper": HTMLContentBlockWrapperElement;
        "content-button": HTMLContentButtonElement;
        "content-carousel": HTMLContentCarouselElement;
        "content-formatter-wrapper": HTMLContentFormatterWrapperElement;
        "content-grid-formatter": HTMLContentGridFormatterElement;
        "content-hero-block": HTMLContentHeroBlockElement;
        "content-image": HTMLContentImageElement;
        "content-line": HTMLContentLineElement;
        "content-overlay": HTMLContentOverlayElement;
        "content-spacing-wrapper": HTMLContentSpacingWrapperElement;
        "content-split-block": HTMLContentSplitBlockElement;
        "content-tabs": HTMLContentTabsElement;
        "content-text-block": HTMLContentTextBlockElement;
        "content-tout-block": HTMLContentToutBlockElement;
        "content-video": HTMLContentVideoElement;
    }
}
declare namespace LocalJSX {
    interface ContentAccordion {
    }
    interface ContentBlockFormatter {
    }
    interface ContentBlockWrapper {
        "background"?: ResponsiveString;
        "backgroundClasses"?: string;
        "maxWidth"?: ResponsiveNumber;
        "name"?: string;
        "onContentBlockReady"?: (event: CustomEvent<HTMLElement>) => void;
        "styleClass"?: ResponsiveString;
    }
    interface ContentButton {
        /**
          * @type Boolean
         */
        "clickableBlock"?: boolean;
        /**
          * @type String
         */
        "controls"?: string;
        /**
          * @type String
         */
        "expanded"?: string;
        /**
          * @type URL
         */
        "href"?: string;
        "onContentBlockActivated"?: (event: CustomEvent<HTMLElement>) => void;
        /**
          * @type String
         */
        "styleClass"?: string;
        /**
          * @type String
         */
        "target"?: string;
    }
    interface ContentCarousel {
        /**
          * @type String
          * @responsive
         */
        "background"?: string;
        /**
          * @type Select
          * @choice load
          * @choice init
         */
        "initMethod"?: InitMethodType;
        "swiperOptions"?: string;
    }
    interface ContentFormatterWrapper {
        "background"?: string;
        "extraClasses"?: string;
        "name"?: string;
    }
    interface ContentGridFormatter {
        /**
          * @type Number
          * @responsive
         */
        "columns"?: ResponsiveNumber;
        /**
          * @type Select
          * @choice flex-start
          * @choice space-between
          * @choice center
          * @choice space-evenly
          * @responsive
         */
        "flexAlign"?: FLEX_JUSTIFY_OPTIONS | ResponsiveString;
        /**
          * @type Boolean
          * @responsive
         */
        "flexGrow"?: ResponsiveBoolean;
        /**
          * @type Boolean
          * @responsive
         */
        "flexShrink"?: ResponsiveBoolean;
        /**
          * @type Select
          * @choice flex
          * @choice grid
          * @responsive
         */
        "type"?: GRID_TYPES | ResponsiveString;
    }
    interface ContentHeroBlock {
        /**
          * @type String
          * @responsive
         */
        "background"?: ResponsiveString;
        /**
          * Pipe separated HeroContentPlacementOptions that will determine where the content is positioned with the media.
          * @type Select
          * @choice below
          * @choice above
          * @responsive
         */
        "contentPosition"?: ResponsiveString | HeroContentPlacementOptions;
    }
    interface ContentImage {
        /**
          * @type String
          * @responsive
         */
        "alt"?: ResponsiveString;
        /**
          * @type Number
          * @responsive
         */
        "height"?: ResponsiveNumber;
        /**
          * @type Boolean
         */
        "lazyLoad"?: boolean;
        /**
          * @type String
          * @responsive
         */
        "src": ResponsiveString;
        /**
          * @type String
         */
        "videoType"?: string;
        /**
          * @type Number
          * @responsive
         */
        "width"?: ResponsiveNumber;
    }
    interface ContentLine {
        /**
          * Pipe separated list of max width numbers. You can also use units such as "px" and "vw".
          * @type Percentage
          * @responsive
         */
        "maxWidth"?: ResponsiveNumber;
        /**
          * The font class for the line.
          * @type String
          * @responsive
         */
        "styleClass"?: ResponsiveString;
        /**
          * Pipe separated list of ContentLineTextAlignOptions for text alignment.
          * @type Select
          * @choice default
          * @choice left
          * @choice center
          * @choice right
          * @responsive
         */
        "textAlign"?: ContentLineTextAlignOptions | ResponsiveString;
    }
    interface ContentOverlay {
        /**
          * Title attribute value for the close button.
          * @type String
         */
        "closeTitle"?: string;
        /**
          * @type Boolean
          * @responsive
         */
        "fullScreen"?: ResponsiveBoolean;
        /**
          * A pipe delimited setting for horizontal alignment. This only applies when fullscreen mode is activated.
          * @type Select
          * @choice default
          * @choice left
          * @choice center
          * @choice right
          * @responsive
         */
        "horizontalAlignment"?: ContentLineTextAlignOptions | ResponsiveString;
        "onContentOverlayActivated"?: (event: CustomEvent<HTMLElement>) => void;
        /**
          * @type String
          * @responsive
         */
        "styleClass"?: ResponsiveString;
        /**
          * @type String
          * @responsive
         */
        "target"?: string;
        /**
          * A pipe delimited setting for vertical alignment. This only applies when fullscreen mode is activated.
          * @type Select
          * @choice top
          * @choice center
          * @choice bottom
         */
        "verticalAlignment"?: ContentVerticalAlignments | ResponsiveString;
    }
    interface ContentSpacingWrapper {
        /**
          * Pipe separated numbers between 0 and 100.
          * @type Number
          * @responsive
         */
        "bottomOffset"?: ResponsiveNumber;
        /**
          * Pipe separated boolean values for full height. Typically, this is used if you have a hero block and you want a footer that aligns with the text layer. This is a niche case, but a valid one.
          * @type Boolean
          * @responsive
         */
        "fullHeight"?: ResponsiveBoolean;
        /**
          * Pipe separated list of ContentLineTextAlignOptions for where to place text box when a max width is specified.
          * @type Select
          * @choice default
          * @choice left
          * @choice center
          * @choice right
          * @responsive
         */
        "horizontalAlignment"?: ContentLineTextAlignOptions | ResponsiveString;
        /**
          * Pipe separated numbers between 0 and 100.
          * @type Number
          * @responsive
         */
        "leftOffset"?: ResponsiveNumber;
        /**
          * Pipe separated list of max width numbers. You can also use units such as "px" and "vw".
          * @type Percentage
          * @responsive
         */
        "maxWidth"?: ResponsiveNumber;
        /**
          * A custom class to use as the offset. This cannot be pipe separated, because this causes repaint of content.
          * @type String
         */
        "offsetClass"?: string;
        /**
          * Pipe separated numbers between 0 and 100.
          * @type Number
          * @responsive
         */
        "rightOffset"?: ResponsiveNumber;
        /**
          * Pipe separated list of ContentLineTextAlignOptions for text alignment.
          * @type Select
          * @choice default
          * @choice left
          * @choice center
          * @choice right
          * @responsive
         */
        "textAlign"?: ContentLineTextAlignOptions | ResponsiveString;
        /**
          * Pipe separated numbers between 0 and 100.
          * @type Number
          * @responsive
         */
        "topOffset"?: ResponsiveNumber;
    }
    interface ContentSplitBlock {
        /**
          * @type String
          * @responsive
         */
        "background"?: string;
        /**
          * @type Boolean
          * @responsive
         */
        "reverse"?: ResponsiveBoolean | boolean;
    }
    interface ContentTabs {
    }
    interface ContentTextBlock {
        /**
          * @type String
          * @responsive
         */
        "background"?: ResponsiveString;
        /**
          * This is a pipe separated string representing the style class.
          * @type String
          * @responsive
         */
        "styleClass"?: ResponsiveString;
        /**
          * Pipe separated list of ContentVerticalAlignments for text box placement.
          * @type Select
          * @choice top
          * @choice center
          * @choice bottom
          * @responsive
         */
        "verticalAlignment"?: ContentVerticalAlignments | ResponsiveString;
    }
    interface ContentToutBlock {
        /**
          * If true, the media content will show only on hover
          * @type Boolean
          * @responsive
         */
        "hover"?: ResponsiveBoolean;
    }
    interface ContentVideo {
        /**
          * If you're using this inside a content-overlay for example, you may want the video to play immediately on launch.
          * @type Boolean
         */
        "autoplay"?: boolean;
        /**
          * @type Boolean
         */
        "controls"?: boolean;
        /**
          * If this video is opened within a container, e.g. a <content-overlay> with a target. The height of the video will fit the container instead of resizing to the video aspect ratio.
          * @type Boolean
          * @responsive
         */
        "fitContainer"?: boolean;
        /**
          * @type Number
         */
        "height"?: number;
        /**
          * @type Select
          * @choice youtube
          * @choice html5
         */
        "method"?: SupportedVideoMethods;
        /**
          * @type String
         */
        "playButtonAriaLabel"?: string;
        /**
          * @type String
         */
        "preload"?: string;
        /**
          * Supports YouTube and self hosted URLs.
          * @type String
         */
        "src"?: string;
        /**
          * @type String
          * @responsive
         */
        "styleClass"?: ResponsiveString;
        /**
          * @type String
         */
        "type"?: string;
        /**
          * @type Number
         */
        "width"?: number;
    }
    interface IntrinsicElements {
        "content-accordion": ContentAccordion;
        "content-block-formatter": ContentBlockFormatter;
        "content-block-wrapper": ContentBlockWrapper;
        "content-button": ContentButton;
        "content-carousel": ContentCarousel;
        "content-formatter-wrapper": ContentFormatterWrapper;
        "content-grid-formatter": ContentGridFormatter;
        "content-hero-block": ContentHeroBlock;
        "content-image": ContentImage;
        "content-line": ContentLine;
        "content-overlay": ContentOverlay;
        "content-spacing-wrapper": ContentSpacingWrapper;
        "content-split-block": ContentSplitBlock;
        "content-tabs": ContentTabs;
        "content-text-block": ContentTextBlock;
        "content-tout-block": ContentToutBlock;
        "content-video": ContentVideo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "content-accordion": LocalJSX.ContentAccordion & JSXBase.HTMLAttributes<HTMLContentAccordionElement>;
            "content-block-formatter": LocalJSX.ContentBlockFormatter & JSXBase.HTMLAttributes<HTMLContentBlockFormatterElement>;
            "content-block-wrapper": LocalJSX.ContentBlockWrapper & JSXBase.HTMLAttributes<HTMLContentBlockWrapperElement>;
            "content-button": LocalJSX.ContentButton & JSXBase.HTMLAttributes<HTMLContentButtonElement>;
            "content-carousel": LocalJSX.ContentCarousel & JSXBase.HTMLAttributes<HTMLContentCarouselElement>;
            "content-formatter-wrapper": LocalJSX.ContentFormatterWrapper & JSXBase.HTMLAttributes<HTMLContentFormatterWrapperElement>;
            "content-grid-formatter": LocalJSX.ContentGridFormatter & JSXBase.HTMLAttributes<HTMLContentGridFormatterElement>;
            "content-hero-block": LocalJSX.ContentHeroBlock & JSXBase.HTMLAttributes<HTMLContentHeroBlockElement>;
            "content-image": LocalJSX.ContentImage & JSXBase.HTMLAttributes<HTMLContentImageElement>;
            "content-line": LocalJSX.ContentLine & JSXBase.HTMLAttributes<HTMLContentLineElement>;
            "content-overlay": LocalJSX.ContentOverlay & JSXBase.HTMLAttributes<HTMLContentOverlayElement>;
            "content-spacing-wrapper": LocalJSX.ContentSpacingWrapper & JSXBase.HTMLAttributes<HTMLContentSpacingWrapperElement>;
            "content-split-block": LocalJSX.ContentSplitBlock & JSXBase.HTMLAttributes<HTMLContentSplitBlockElement>;
            "content-tabs": LocalJSX.ContentTabs & JSXBase.HTMLAttributes<HTMLContentTabsElement>;
            "content-text-block": LocalJSX.ContentTextBlock & JSXBase.HTMLAttributes<HTMLContentTextBlockElement>;
            "content-tout-block": LocalJSX.ContentToutBlock & JSXBase.HTMLAttributes<HTMLContentToutBlockElement>;
            "content-video": LocalJSX.ContentVideo & JSXBase.HTMLAttributes<HTMLContentVideoElement>;
        }
    }
}
